{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"RRHQD","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>Important</p> <p>This software is still in development.</p> <p>Please report bugs to Github</p>"},{"location":"index.html#download-rrhqd","title":"Download RRHQD","text":"<p>Download</p> <ul> <li>Download the latest version of the software from Github</li> </ul>"},{"location":"Setup-Checkmk.html","title":"Setup a Checkmk docker","text":""},{"location":"Setup-Checkmk.html#set-up-instructions","title":"Set up instructions:","text":"<p>Follow the setup these instructions to configure the system.</p> <p>User Input for Docker Image</p> <ul> <li>Prompts the user to input the Docker image for CheckMK. If the user doesn't provide any input, it defaults to \"checkmk/check-mk-raw:latest.\"</li> </ul> <p>User Input for Container Name</p> <ul> <li>Prompts the user to input the name for the CheckMK container. If no input is provided, it defaults to \"checkmk-container.\"</li> </ul> <p>User Input for Exposed Port</p> <ul> <li>Prompts the user to input the port on which CheckMK should be exposed. Defaults to port 8080 if no input is provided.</li> </ul> <p>User Input for Data Path</p> <ul> <li>Prompts the user to input the path for CheckMK data. Defaults to \"./Data/checkmk-data\" if no input is provided.</li> </ul>"},{"location":"Setup-Checkmk.html#docker-compose-file-generation","title":"Docker Compose File Generation","text":"<p>Docker Compose File Generation</p> <ul> <li> <p>Defines a subfolder for Docker compose files and creates it if it doesn't exist.</p> </li> <li> <p>Generates a Docker compose file based on user inputs, specifying the CheckMK image, exposed port, and data volume.</p> </li> </ul>"},{"location":"Setup-Checkmk.html#inform-user","title":"Inform User","text":"<p>Inform User</p> <ul> <li>Informs the user about the location of the created Docker compose file.</li> </ul>"},{"location":"Setup-Checkmk.html#check-docker-status","title":"Check Docker Status","text":"<p>Check Docker Status</p> <ul> <li>Checks if Docker is running, and if not, prompts the user to start Docker and rerun the script. The method of checking depends on the Linux distribution.</li> </ul>"},{"location":"Setup-Checkmk.html#start-docker-container","title":"Start Docker Container","text":"<p>Start Docker Container</p> <ul> <li>Uses docker-compose to start the CheckMK container in detached mode (-d). It uses sudo if the OS is Ubuntu, Zorin, Linux Mint, or Kali.</li> </ul>"},{"location":"Setup-Checkmk.html#check-container-start-status","title":"Check Container Start Status","text":"<p>Check Container Start Status</p> <ul> <li>Checks if the Docker container has started successfully. If successful, it displays a success message with the container's name and login details. If not, it shows an error message and exits with an error code.</li> </ul>"},{"location":"Setup-Cloudflare.html","title":"Setup a Cloudflare Tunnel Docker","text":""},{"location":"Setup-Cloudflare.html#set-up-instructions","title":"Set up instructions","text":"<p>Follow the setup these instructions to configure the system.</p>"},{"location":"Setup-Cloudflare.html#detecting-os-and-setting-sudo","title":"Detecting OS and Setting Sudo","text":"<p>Detecting OS and Setting Sudo</p> <ul> <li>The script starts by determining the operating system to adjust command prefixes accordingly. If the OS is Ubuntu, Kali, Linux Mint, or Zorin, it sets USE_SUDO to \"sudo\".</li> </ul>"},{"location":"Setup-Cloudflare.html#creating-appdata-directory-and-setting-permissions","title":"Creating Appdata Directory and Setting Permissions","text":"<p>Creating Appdata Directory and Setting Permissions</p> <ul> <li>A directory, /mnt/user/appdata/cloudflared/, is created, and its permissions are set to 777. This directory seems to be a storage location for Cloudflared configurations.</li> </ul>"},{"location":"Setup-Cloudflare.html#running-cloudflare-tunnel-login-command","title":"Running Cloudflare Tunnel Login Command","text":"<p>Running Cloudflare Tunnel Login Command</p> <ul> <li>The script runs a Docker command to log in to the Cloudflare Tunnel, interacting with the /mnt/user/appdata/cloudflared/ directory.</li> </ul>"},{"location":"Setup-Cloudflare.html#creating-a-cloudflare-tunnel","title":"Creating a Cloudflare Tunnel","text":"<p>Creating a Cloudflare Tunnel</p> <ul> <li>Another Docker command is used to create a Cloudflare tunnel. The configuration is stored in the same directory, and the tunnel is named based on user input.</li> </ul>"},{"location":"Setup-Cloudflare.html#configuring-cloudflare-tunnel-for-websites","title":"Configuring Cloudflare Tunnel for Website(s)","text":"<p>Configuring Cloudflare Tunnel for Website(s)</p> <ul> <li> <p>The script prompts the user for information about the website(s) they want to host via the Cloudflare Tunnel. It asks for the number of sites, tunnel UUID, protocol (http/https), reverse proxy IP, port, and domain.</p> </li> <li> <p>Based on the number of sites, it generates a configuration file (config.yml) in the /mnt/user/appdata/cloudflared/ directory.</p> </li> </ul>"},{"location":"Setup-Cloudflare.html#starting-the-cloudflare-tunnel","title":"Starting the Cloudflare Tunnel","text":"<p>Starting the Cloudflare Tunnel</p> <ul> <li> <p>The script concludes by starting the Cloudflare tunnel in detached mode, utilizing the configuration provided by the user.</p> </li> <li> <p>Additionally, for cases where the user wants to host multiple sites, the script uses dialog to display a message box instructing them to manually configure the generated config.yml file for additional sites.</p> </li> </ul>"},{"location":"Setup-Deluge.html","title":"Setup a Deluge Docker","text":""},{"location":"Setup-Deluge.html#set-up-instructions","title":"Set up instructions","text":"<p>Follow the setup these instructions to configure the system.</p> <p>Docker Image</p> <ul> <li>The script prompts the user to input the Docker image for Deluge. If no input is provided, it defaults to \"lscr.io/linuxserver/deluge:latest\".</li> </ul> <p>Container Name</p> <ul> <li>The user is asked to enter a name for the Docker container. If no input is given, it defaults to \"deluge-container\".</li> </ul> <p>Folders</p> <ul> <li>The script requests the Deluge root folder and download folder. If skipped, default settings (./Data/config for Deluge root folder and ./Data/downloads for the download folder) are used.</li> </ul>"},{"location":"Setup-Deluge.html#docker-compose-file-generation","title":"Docker Compose File Generation","text":"<p>Docker Compose Generation</p> <ul> <li>It sets up a subfolder for Docker Compose files (./RRHQD-Dockers/Deluge) and creates a Docker Compose file (docker-compose-$CONTAINER_NAME.yml).</li> </ul>"},{"location":"Setup-Deluge.html#docker-compose-file-content","title":"Docker Compose File Content","text":"<p>Docker Compose Content</p> <ul> <li>The content is generated dynamically using a heredoc. It includes specifications for the Docker Compose version, Deluge service settings (image, container name, network mode, environment variables, volume mappings, ports, and restart policy).</li> </ul>"},{"location":"Setup-Deluge.html#folder-creation","title":"Folder Creation","text":"<p>Folder Creation</p> <ul> <li>The script ensures the existence of the subfolder for Docker Compose files, creating it if necessary.</li> </ul>"},{"location":"Setup-Deluge.html#inform-user-and-start-container","title":"Inform User and Start Container","text":"<p>Inform User and Start Container</p> <ul> <li>The user is informed that the Docker Compose file for Deluge has been created. The script attempts to start the Deluge container using docker compose -f $COMPOSE_FILE up -d.</li> </ul>"},{"location":"Setup-Deluge.html#check-container-status","title":"Check Container Status","text":"<p>Check Container Status</p> <ul> <li>After the attempt to start the container, it checks if the Docker container has started successfully by querying Docker for the container's ID.</li> </ul>"},{"location":"Setup-Deluge.html#user-notification","title":"User Notification","text":"<p>User Notification</p> <ul> <li>If the container started successfully, a success message is displayed using dialog. Otherwise, an error message is shown, and the script exits with an error code.</li> </ul>"},{"location":"Setup-Linkwarden.html","title":"Setup a Linkwarden docker","text":""},{"location":"Setup-Linkwarden.html#set-up-instructions","title":"Set up instructions","text":"<p>Follow the setup these instructions to configure the system.</p>"},{"location":"Setup-Linkwarden.html#setting-environment-variables","title":"Setting Environment Variables","text":"<p>Setting Environment Variables</p> <p>You'll be asked to provide three pieces of information:</p> <ul> <li> <p>NEXTAUTH_SECRET: A secret key for authentication.</p> </li> <li> <p>NEXTAUTH_URL: The URL for authentication requests.</p> </li> <li> <p>POSTGRES_PASSWORD: Password for the PostgreSQL database.</p> </li> </ul> <pre><code>Enter the NEXTAUTH_SECRET (it should look like ^7yTjn@G$j@KtLh9&amp;@UdMpdfDZ):\nEnter the NEXTAUTH_URL (it should look like 'http://localhost:3000/api/v1/auth'):\nEnter the POSTGRES_PASSWORD:\n</code></pre>"},{"location":"Setup-Linkwarden.html#validation","title":"Validation","text":"<p>Validation</p> <ul> <li>Make sure not to leave any field empty; otherwise, an error will be displayed.</li> </ul> <pre><code>NEXTAUTH_SECRET is empty. Please enter a valid secret.\n</code></pre>"},{"location":"Setup-Linkwarden.html#write-to-env-file","title":"Write to .env File","text":"<p>Write to .env File</p> <ul> <li>If all values are provided, they will be stored in a .env file.</li> </ul> <pre><code>NEXTAUTH_SECRET=&lt;your_secret&gt;\nNEXTAUTH_URL=&lt;your_url&gt;\nPOSTGRES_PASSWORD=&lt;your_password&gt;\n</code></pre>"},{"location":"Setup-Linkwarden.html#run-docker-compose","title":"Run Docker Compose","text":"<p>Run Docker Compose</p> <ul> <li>The setup initiates Docker Compose to start the container in the background.</li> </ul> <pre><code>docker compose up -d\n</code></pre>"},{"location":"Setup-Linkwarden.html#check-container-status","title":"Check Container Status","text":"<p>Check Container Status</p> <ul> <li>After starting, it checks if the Docker container is running successfully. bash</li> </ul> <pre><code>The Docker container ghcr.io/linkwarden/linkwarden:latest has started successfully.\n</code></pre> <ul> <li>If there's an issue, an error message will advise you to check the logs for more details. sql</li> </ul> <pre><code>Failed to start the Docker container ghcr.io/linkwarden/linkwarden:latest. Please check the logs for details.\n</code></pre>"}]}